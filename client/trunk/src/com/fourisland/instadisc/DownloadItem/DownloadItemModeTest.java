/*
 * DownloadItemModeTest.java
 *
 * Created on September 27, 2008, 10:20 AM
 */

package com.fourisland.instadisc.DownloadItem;

import com.fourisland.instadisc.Database.Wrapper;
import com.fourisland.instadisc.FirstRun.StepEndResults;
import com.fourisland.instadisc.XmlRpc;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author  hatkirby
 */
public class DownloadItemModeTest extends javax.swing.JDialog {
    
    /** Creates new form DownloadItemModeTest */
    public DownloadItemModeTest(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
            
        new Thread(new Runnable() {
            public void run() {
                runDownloadItemModeTest();
            }
        }).start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.fourisland.instadisc.InstaDiscApp.class).getContext().getResourceMap(DownloadItemModeTest.class);
        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setEnabled(false);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        XmlRpc xmlrpc = new XmlRpc("setDownloadItemMode");
        xmlrpc.addParam(Wrapper.getConfig("downloadItemMode"));
        xmlrpc.execute();
        
        StepEndResults.ok = true;
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DownloadItemModeTest dialog = new DownloadItemModeTest(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
    
    public void runDownloadItemModeTest() {
        try
        {
            ServerSocket svr = new ServerSocket();
            java.net.InetSocketAddress addr = new java.net.InetSocketAddress(61200);
            svr.bind(addr);

            new Thread(new DownloadItemModeTestThread(svr)).start();

            XmlRpc xmlrpc = new XmlRpc("downloadItemModeTest");
            xmlrpc.resetParams();
            if (((Integer) xmlrpc.execute()) == 1)
            {
                Wrapper.setConfig("downloadItemMode", "Pull");
            }
        } catch (IOException ex)
        {
            Logger.getLogger(DownloadItemModeTest.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jLabel3.setText("<HTML>You're download item mode has been set to <B>" + Wrapper.getConfig("downloadItemMode") + "</B>");
        jButton1.setEnabled(true);
    }
}

class DownloadItemModeTestThread implements Runnable
{
    ServerSocket svr;
    
    public DownloadItemModeTestThread(ServerSocket svr)
    {
        this.svr = svr;
    }
    
    public void run() {
        try
        {
            Socket s = svr.accept();
            
            InputStream is = s.getInputStream();
            int buffer[] = new int[1000];
            int rs = 0;
            int i = 0;

            while (rs != -1)
            {
                try
                {
                    rs = is.read();

                    if (rs != -1)
                    {
                        buffer[i] = rs;
                    }
                    
                    i++;
                } catch (SocketException ex)
                {
                    return;
                } catch (IOException ex)
                {
                    Logger.getLogger(DownloadItemModeTest.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            StringBuilder result = new StringBuilder();
            int j = 0;
            for (j = 0; j < i; j++)
            {
                result.append(Character.toString((char) buffer[j]));
            }
            
            if (result.toString().trim().equals("InstaDisc Download Item Mode Test"))
            {
                Wrapper.setConfig("downloadItemMode", "Push");
            }
            
            s.close();
            svr.close();
        } catch (IOException ex)
        {
            Logger.getLogger(DownloadItemModeTestThread.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}